{% extends 'base.html.twig' %}

{% block title %}Ajouter des articles{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="{{ asset('filepond.css') }}" rel="stylesheet">
{% endblock %}

{% block body %}
    <h1>Ajouter des articles dans le catalogue</h1>

    {{ include('article/_form_add.html.twig') }}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/filepond/dist/filepond.min.js"></script>
    <script src="https://unpkg.com/jquery-filepond/filepond.jquery.js"></script>
    <script type="text/javascript">
        let category = $('#articles_category').val();
        let chemin = '{{ path('app_article_image_upload') }}';
        $('#article_image').filepond({
                allowMultiple: true,
                storeAsFile: true,
                server: {
                    process: (fieldName, file, metadata, load, error, progress, abort, transfer, options) => {
                        let selectedCategory = $('#articles_category').val();
                        // fieldName is the name of the input field
                        // file is the actual file object to send
                        const formData = new FormData();
                        formData.append(fieldName, file, file.name);
                        formData.append('category', selectedCategory);

                        const request = new XMLHttpRequest();
                        request.open('POST', chemin);

                        // Should call the progress method to update the progress to 100% before calling load
                        // Setting computable to false switches the loading indicator to infinite mode
                        request.upload.onprogress = (e) => {
                            progress(e.lengthComputable, e.loaded, e.total);
                        };

                        // Should call the load method when done and pass the returned server file id
                        // this server file id is then used later on when reverting or restoring a file
                        // so your server knows which file to return without exposing that info to the client
                        request.onload = function () {
                            if (request.status >= 200 && request.status < 300) {
                                // the load method accepts either a string (id) or an object
                                load(request.responseText);
                            } else {
                                // Can call the error method if something is wrong, should exit after
                                error('oh no');
                            }
                        };

                        request.send(formData);

                        // Should expose an abort method so the request can be cancelled
                        return {
                            abort: () => {
                                // This function is entered if the user has tapped the cancel button
                                request.abort();

                                // Let FilePond know the request has been cancelled
                                abort();
                            },
                        };
                    },
                },
            });

        document.addEventListener('FilePond:processfiles', (e) => {
            console.log('FilePond ready for use', e.detail);

            window.location.href = '{{ path('app_article_index') }}';
        });
    </script>
{% endblock %}
